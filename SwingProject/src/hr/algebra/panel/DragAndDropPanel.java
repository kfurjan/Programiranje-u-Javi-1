package hr.algebra.panel;

import hr.algebra.model.Actor;
import hr.algebra.model.ActorTransferable;
import hr.algebra.model.Movie;
import hr.algebra.repository.Repository;
import hr.algebra.repository.RepositoryFactory;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;

/**
 *
 * @author Kevin Furjan
 */
public class DragAndDropPanel extends javax.swing.JPanel {

    Repository repository;
    private Set<Actor> actorsSet = new TreeSet<>();
    private DefaultListModel<Movie> moviesModel;
    private DefaultListModel<Actor> movieActorsModel;
    private DefaultListModel<Actor> allActorsModel;

    private static final String ERROR = "Error";
    private static final String MOVIE_ACTORS_ERROR = "Unable to show actors for selected movie";
    private static final String UNRECOVERABLE_ERROR = "Unrecoverable error";
    private static final String CANNOT_INITIATE_THE_FORM = "Cannot initiate the form";

    /**
     * Creates new form DragAndDropPanel
     */
    public DragAndDropPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsAllMovies = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsMovieActors = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();

        jLabel1.setText("All movies:");

        lsAllMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsAllMoviesMouseClicked(evt);
            }
        });
        lsAllMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lsAllMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lsAllMovies);

        jLabel2.setText("Actors for selected movie:");

        jScrollPane2.setViewportView(lsMovieActors);

        jLabel3.setText("All actors:");

        jScrollPane3.setViewportView(lsAllActors);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lsAllMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lsAllMoviesKeyReleased

        showMovieActors();
    }//GEN-LAST:event_lsAllMoviesKeyReleased

    private void lsAllMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAllMoviesMouseClicked

        showMovieActors();
    }//GEN-LAST:event_lsAllMoviesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<Actor> lsAllActors;
    private javax.swing.JList<Movie> lsAllMovies;
    private javax.swing.JList<Actor> lsMovieActors;
    // End of variables declaration//GEN-END:variables

    private void init() {

        try {
            initRepository();
            initModels();
            loadMoviesModel();
            initDragAndDrop();
        } catch (Exception ex) {
            Logger.getLogger(DragAndDropPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(UNRECOVERABLE_ERROR, CANNOT_INITIATE_THE_FORM);
            System.exit(1);
        }
    }

    private void initRepository() throws Exception {

        repository = RepositoryFactory.getRepository();
    }

    private void initModels() {

        moviesModel = new DefaultListModel<>();
        movieActorsModel = new DefaultListModel<>();
        allActorsModel = new DefaultListModel<>();
    }

    private void loadMoviesModel() throws Exception {

        moviesModel.clear();
        repository.selectMovies().forEach(movie -> moviesModel.addElement(movie));
        lsAllMovies.setModel(moviesModel);
    }

    private void showMovieActors() {

        try {
            loadMovieActors();
            loadAllActors();
        } catch (Exception ex) {
            Logger.getLogger(DragAndDropPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(ERROR, MOVIE_ACTORS_ERROR);
        }
    }

    private void loadMovieActors() throws Exception {

        movieActorsModel.clear();
        List<Actor> actorsList = repository.selectMovieActors(lsAllMovies.getSelectedValue().getId());
        actorsList.forEach(actor -> movieActorsModel.addElement(actor));
        actorsSet.addAll(actorsList);
        lsMovieActors.setModel(movieActorsModel);
    }

    private void loadAllActors() throws Exception {

        allActorsModel.clear();
        repository.selectActors().forEach(actor -> allActorsModel.addElement(actor));
        lsAllActors.setModel(allActorsModel);
    }

    private void initDragAndDrop() {

        lsAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllActors.setDragEnabled(true);
        lsAllActors.setTransferHandler(new ExportTransferHandler());

        lsMovieActors.setDropMode(DropMode.ON);
        lsMovieActors.setTransferHandler(new ImportTransferHandler());
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ActorTransferable(lsAllActors.getSelectedValue());
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferable.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor add = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);
                if (actorsSet.add(add)) {
                    loadActorsModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(DragAndDropPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

        private void loadActorsModel() {

            movieActorsModel.clear();
            actorsSet.forEach(author -> movieActorsModel.addElement(author));
            lsMovieActors.setModel(movieActorsModel);
        }
    }
}
