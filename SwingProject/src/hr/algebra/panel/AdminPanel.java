package hr.algebra.panel;

import hr.algebra.model.Movie;
import hr.algebra.parser.rss.MovieParser;
import hr.algebra.repository.Repository;
import hr.algebra.repository.RepositoryFactory;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.MessageUtils;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Kevin Furjan
 */
public class AdminPanel extends javax.swing.JPanel {

    Path path;
    Repository repository;
    private DefaultListModel<Movie> moviesModel;

    private static final String ASSETS_PATH = "assets";

    private static final String UNRECOVERABLE_ERROR = "Unrecoverable error";
    private static final String CANNOT_INITIATE_THE_FORM = "Cannot initiate the form";
    private static final String DOWNLOAD_ERROR = "Error while downloading data";
    private static final String DATA_DELETION_ERROR = "Error while clearing data";

    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {

        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnClearData = new javax.swing.JButton();
        btnDownloadData = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsMoviesList = new javax.swing.JList<>();

        btnClearData.setText("Clear data");
        btnClearData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearDataActionPerformed(evt);
            }
        });

        btnDownloadData.setText("Download data");
        btnDownloadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadDataActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lsMoviesList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDownloadData, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                        .addComponent(btnClearData, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearData, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDownloadData, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDownloadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadDataActionPerformed

        try {
            List<Movie> movies = MovieParser.parse();
            repository.createMovies(movies);
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(UNRECOVERABLE_ERROR, DOWNLOAD_ERROR);
            System.exit(1);
        }
    }//GEN-LAST:event_btnDownloadDataActionPerformed

    private void btnClearDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearDataActionPerformed

        try {
            repository.clearMovies();
            FileUtils.deleteDirectory(path);
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(UNRECOVERABLE_ERROR, DATA_DELETION_ERROR);
            System.exit(1);
        }
    }//GEN-LAST:event_btnClearDataActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearData;
    private javax.swing.JButton btnDownloadData;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Movie> lsMoviesList;
    // End of variables declaration//GEN-END:variables

    private void init() {

        try {
            initRepository();
            initMoviesModel();
            initAssetsPath();
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(UNRECOVERABLE_ERROR, CANNOT_INITIATE_THE_FORM);
            System.exit(1);
        }
    }

    private void initRepository() throws Exception {

        repository = RepositoryFactory.getRepository();
    }

    private void initMoviesModel() {

        moviesModel = new DefaultListModel<>();
    }

    private void initAssetsPath() {

        path = Paths.get(ASSETS_PATH);
    }

    private void loadModel() throws Exception {

        List<Movie> movies = repository.selectMovies();
        moviesModel.clear();
        btnClearData.setEnabled((movies.size() > 0));
        movies.forEach(movie -> moviesModel.addElement(movie));
        lsMoviesList.setModel(moviesModel);
    }
}
